# Production-optimized Dockerfile for Nimify Anything
# Multi-stage build optimized for size and security
FROM nvidia/cuda:12.9.1-devel-ubuntu22.04 AS builder

# Build arguments
ARG PYTHON_VERSION=3.10
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION

# Environment variables
ENV DEBIAN_FRONTEND=noninteractive \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    python${PYTHON_VERSION} \
    python${PYTHON_VERSION}-dev \
    python3-pip \
    build-essential \
    curl \
    git \
    pkg-config \
    && rm -rf /var/lib/apt/lists/*

# Create and activate virtual environment
RUN python${PYTHON_VERSION} -m pip install --upgrade pip setuptools wheel
RUN python${PYTHON_VERSION} -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy and install Python dependencies
COPY pyproject.toml README.md ./
COPY src/ ./src/

# Install dependencies and application
RUN pip install --no-cache-dir build
RUN python -m build --wheel
RUN pip install --no-cache-dir dist/*.whl

# Production stage
FROM nvidia/cuda:12.9.1-runtime-ubuntu22.04 AS production

# Build metadata
LABEL org.opencontainers.image.title="Nimify Anything" \
      org.opencontainers.image.description="Production CLI for NVIDIA NIM service deployment" \
      org.opencontainers.image.version="${VERSION}" \
      org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.revision="${VCS_REF}" \
      org.opencontainers.image.source="https://github.com/danieleschmidt/nimify-anything" \
      org.opencontainers.image.licenses="MIT" \
      org.opencontainers.image.vendor="Terragon Labs" \
      org.opencontainers.image.authors="Daniel Schmidt <author@example.com>"

# Environment variables
ENV DEBIAN_FRONTEND=noninteractive \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PATH="/opt/venv/bin:$PATH" \
    NIMIFY_ENV=production \
    NIMIFY_LOG_LEVEL=INFO

# Install runtime dependencies only
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3.10 \
    python3-pip \
    curl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get purge -y --auto-remove \
    && apt-get clean

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv

# Create application user and directories
RUN groupadd -r -g 1001 nimify \
    && useradd -r -g nimify -u 1001 -m -d /app nimify \
    && mkdir -p /app /models /cache /tmp/nimify \
    && chown -R nimify:nimify /app /models /cache /tmp/nimify

# Set working directory
WORKDIR /app

# Copy application files
COPY --chown=nimify:nimify scripts/entrypoint.sh /usr/local/bin/
COPY --chown=nimify:nimify config/logging.yaml /app/config/

# Make entrypoint executable
RUN chmod +x /usr/local/bin/entrypoint.sh

# Switch to non-root user
USER nimify

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD nimify doctor --quiet || exit 1

# Expose ports
EXPOSE 8000 9090

# Set entrypoint and default command
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
CMD ["nimify", "server", "--host", "0.0.0.0", "--port", "8000"]

# Development stage (for debugging)
FROM production AS development

# Switch back to root for installing dev tools
USER root

# Install development dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    vim \
    htop \
    strace \
    && rm -rf /var/lib/apt/lists/*

# Install development Python packages
RUN pip install --no-cache-dir \
    debugpy \
    ipython \
    pytest \
    pytest-cov

# Switch back to application user
USER nimify

# Override for development
ENV NIMIFY_ENV=development \
    DEBUG=true \
    NIMIFY_LOG_LEVEL=DEBUG

# Development command with debugger
CMD ["python", "-m", "debugpy", "--listen", "0.0.0.0:5678", "--wait-for-client", "-m", "nimify.cli", "server", "--reload"]