name: Security Scan

on:
  schedule:
    # Run weekly security scans on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,security]
    
    - name: Run Bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -f txt
    
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Upload Bandit results to GitHub
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: bandit-report.json
    
    - name: Run Semgrep security scan
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/python
    
    - name: Upload artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: [dependency-scan]
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build container image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.production
        target: production
        tags: ${{ env.IMAGE_NAME }}:security-scan
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_NAME }}:security-scan
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Grype vulnerability scanner
      uses: anchore/scan-action@v3
      id: grype-scan
      with:
        image: ${{ env.IMAGE_NAME }}:security-scan
        fail-build: false
    
    - name: Upload Grype scan SARIF report
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: ${{ steps.grype-scan.outputs.sarif }}

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install detect-secrets
      run: |
        pip install detect-secrets
    
    - name: Run detect-secrets scan
      run: |
        detect-secrets scan \
          --baseline .secrets.baseline \
          --exclude-files '\.git/.*' \
          --exclude-files '\.pytest_cache/.*' \
          --exclude-files '__pycache__/.*' \
          --exclude-files 'node_modules/.*' \
          --exclude-files '\.venv/.*' \
          --exclude-files 'venv/.*'
    
    - name: Verify secrets baseline
      run: |
        detect-secrets audit .secrets.baseline

  sbom-generation:
    name: Generate SBOM
    runs-on: ubuntu-latest
    needs: [container-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build container image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.production
        target: production
        tags: ${{ env.IMAGE_NAME }}:sbom
        load: true
    
    - name: Install Syft
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
    
    - name: Generate SBOM for container
      run: |
        syft ${{ env.IMAGE_NAME }}:sbom -o spdx-json > container-sbom.json
        syft ${{ env.IMAGE_NAME }}:sbom -o cyclonedx-json > container-sbom-cyclone.json
    
    - name: Generate SBOM for source
      run: |
        syft dir:. -o spdx-json > source-sbom.json
        syft dir:. -o cyclonedx-json > source-sbom-cyclone.json
    
    - name: Upload SBOM artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sbom-reports
        path: |
          container-sbom.json
          container-sbom-cyclone.json
          source-sbom.json
          source-sbom-cyclone.json
    
    - name: Attest SBOM
      uses: actions/attest-sbom@v1
      with:
        subject-path: container-sbom.json
        sbom-path: container-sbom.json

  compliance-check:
    name: Compliance Verification
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check license compliance
      run: |
        # Verify all files have proper license headers
        python scripts/compliance-check.py --check-licenses
    
    - name: Verify SLSA compliance
      run: |
        # Check SLSA compliance requirements
        python scripts/compliance-check.py --check-slsa
    
    - name: Generate compliance report
      run: |
        python scripts/compliance-check.py --generate-report
    
    - name: Upload compliance report
      uses: actions/upload-artifact@v4
      with:
        name: compliance-report
        path: compliance-report.json

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, container-scan, secrets-scan, sbom-generation, compliance-check]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Generate security summary
      run: |
        python scripts/generate-security-summary.py \
          --bandit security-reports/bandit-report.json \
          --safety security-reports/safety-report.json \
          --trivy trivy-results.sarif \
          --sbom sbom-reports/container-sbom.json \
          --compliance compliance-report/compliance-report.json \
          --output security-summary.md
    
    - name: Comment security summary on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## ðŸ”’ Security Scan Results\n\n${summary}`
          });
    
    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security-summary.md

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [security-summary]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Notify Slack on failure
      if: contains(needs.*.result, 'failure')
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "ðŸš¨ Security scan failed for ${{ github.repository }}"
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
    
    - name: Notify Discord on critical findings
      if: contains(needs.*.result, 'failure')
      uses: Ilshidur/action-discord@master
      with:
        args: "ðŸ”’ Critical security findings detected in ${{ github.repository }}. Please review immediately."
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}