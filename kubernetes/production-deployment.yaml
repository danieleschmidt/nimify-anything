# Kubernetes Production Deployment for Nimify Anything
# Generated by Autonomous SDLC Execution
apiVersion: v1
kind: Namespace
metadata:
  name: nimify-production
  labels:
    name: nimify-production
    environment: production
    generated-by: terragon-autonomous-sdlc

---
# ConfigMap for shared configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: nimify-config
  namespace: nimify-production
data:
  LOG_LEVEL: "INFO"
  METRICS_ENABLED: "true"
  MODEL_PATH: "/models/model.onnx"
  PYTHONPATH: "/app/src"
  ENVIRONMENT: "production"

---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: nimify-secrets
  namespace: nimify-production
type: Opaque
data:
  # Base64 encoded values
  redis-password: cGFzc3dvcmQ=  # password
  postgres-password: cGFzc3dvcmQ=  # password
  jwt-secret: c3VwZXItc2VjcmV0LWp3dC1rZXk=  # super-secret-jwt-key

---
# Generation 1: Simple NIM Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nimify-simple
  namespace: nimify-production
  labels:
    app: nimify-simple
    version: v1
    tier: api
    generation: "1"
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nimify-simple
  template:
    metadata:
      labels:
        app: nimify-simple
        version: v1
        tier: api
        generation: "1"
    spec:
      containers:
      - name: nimify-simple
        image: nimify/simple:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
        - containerPort: 9090
          name: metrics
        env:
        - name: SERVICE_TYPE
          value: "simple"
        - name: API_VERSION
          value: "v1"
        envFrom:
        - configMapRef:
            name: nimify-config
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
        volumeMounts:
        - name: models
          mountPath: /models
          readOnly: true
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: models
        configMap:
          name: model-config
      - name: logs
        emptyDir: {}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000

---
# Generation 2: Robust NIM Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nimify-robust
  namespace: nimify-production
  labels:
    app: nimify-robust
    version: v2
    tier: api
    generation: "2"
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nimify-robust
  template:
    metadata:
      labels:
        app: nimify-robust
        version: v2
        tier: api
        generation: "2"
    spec:
      containers:
      - name: nimify-robust
        image: nimify/robust:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
        - containerPort: 9090
          name: metrics
        env:
        - name: SERVICE_TYPE
          value: "robust"
        - name: API_VERSION
          value: "v2"
        - name: CIRCUIT_BREAKER_ENABLED
          value: "true"
        - name: ERROR_RECOVERY_ENABLED
          value: "true"
        - name: SECURITY_ENABLED
          value: "true"
        - name: REDIS_URL
          value: "redis://nimify-redis:6379"
        - name: POSTGRES_URL
          value: "postgresql://nimify:$(POSTGRES_PASSWORD)@nimify-postgres:5432/nimify"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: nimify-secrets
              key: postgres-password
        envFrom:
        - configMapRef:
            name: nimify-config
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 45
          periodSeconds: 15
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 2
        volumeMounts:
        - name: models
          mountPath: /models
          readOnly: true
        - name: logs
          mountPath: /app/logs
        - name: security
          mountPath: /app/security
          readOnly: true
      volumes:
      - name: models
        configMap:
          name: model-config
      - name: logs
        emptyDir: {}
      - name: security
        secret:
          secretName: nimify-secrets
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000

---
# Generation 3: Optimized NIM Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nimify-optimized
  namespace: nimify-production
  labels:
    app: nimify-optimized
    version: v3
    tier: api
    generation: "3"
spec:
  replicas: 4
  selector:
    matchLabels:
      app: nimify-optimized
  template:
    metadata:
      labels:
        app: nimify-optimized
        version: v3
        tier: api
        generation: "3"
    spec:
      containers:
      - name: nimify-optimized
        image: nimify/optimized:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
        - containerPort: 9090
          name: metrics
        env:
        - name: SERVICE_TYPE
          value: "optimized"
        - name: API_VERSION
          value: "v3"
        - name: PERFORMANCE_OPTIMIZATION_ENABLED
          value: "true"
        - name: AUTO_SCALING_ENABLED
          value: "true"
        - name: CACHE_SIZE_MB
          value: "1024"
        - name: BATCH_SIZE_MAX
          value: "64"
        - name: PREDICTIVE_SCALING_ENABLED
          value: "true"
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@nimify-redis:6379"
        - name: POSTGRES_URL
          value: "postgresql://nimify:$(POSTGRES_PASSWORD)@nimify-postgres:5432/nimify"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: nimify-secrets
              key: redis-password
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: nimify-secrets
              key: postgres-password
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: nimify-secrets
              key: jwt-secret
        envFrom:
        - configMapRef:
            name: nimify-config
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 20
          timeoutSeconds: 15
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 10
          failureThreshold: 2
        volumeMounts:
        - name: models
          mountPath: /models
          readOnly: true
        - name: logs
          mountPath: /app/logs
        - name: cache
          mountPath: /app/cache
      volumes:
      - name: models
        configMap:
          name: model-config
      - name: logs
        emptyDir: {}
      - name: cache
        emptyDir:
          sizeLimit: 2Gi
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000

---
# Service for Simple NIM
apiVersion: v1
kind: Service
metadata:
  name: nimify-simple-service
  namespace: nimify-production
  labels:
    app: nimify-simple
    generation: "1"
spec:
  selector:
    app: nimify-simple
  ports:
  - name: http
    port: 80
    targetPort: 8000
  - name: metrics
    port: 9090
    targetPort: 9090
  type: ClusterIP

---
# Service for Robust NIM
apiVersion: v1
kind: Service
metadata:
  name: nimify-robust-service
  namespace: nimify-production
  labels:
    app: nimify-robust
    generation: "2"
spec:
  selector:
    app: nimify-robust
  ports:
  - name: http
    port: 80
    targetPort: 8000
  - name: metrics
    port: 9090
    targetPort: 9090
  type: ClusterIP

---
# Service for Optimized NIM
apiVersion: v1
kind: Service
metadata:
  name: nimify-optimized-service
  namespace: nimify-production
  labels:
    app: nimify-optimized
    generation: "3"
spec:
  selector:
    app: nimify-optimized
  ports:
  - name: http
    port: 80
    targetPort: 8000
  - name: metrics
    port: 9090
    targetPort: 9090
  type: ClusterIP

---
# Redis Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nimify-redis
  namespace: nimify-production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nimify-redis
  template:
    metadata:
      labels:
        app: nimify-redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        args:
        - redis-server
        - --requirepass
        - $(REDIS_PASSWORD)
        - --appendonly
        - "yes"
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: nimify-secrets
              key: redis-password
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        volumeMounts:
        - name: redis-data
          mountPath: /data
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-pvc

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: nimify-redis
  namespace: nimify-production
spec:
  selector:
    app: nimify-redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP

---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nimify-postgres
  namespace: nimify-production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nimify-postgres
  template:
    metadata:
      labels:
        app: nimify-postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          value: nimify
        - name: POSTGRES_USER
          value: nimify
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: nimify-secrets
              key: postgres-password
        - name: POSTGRES_INITDB_ARGS
          value: --encoding=UTF-8
        ports:
        - containerPort: 5432
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-pvc

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: nimify-postgres
  namespace: nimify-production
spec:
  selector:
    app: nimify-postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nimify-ingress
  namespace: nimify-production
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - nimify.example.com
    secretName: nimify-tls
  rules:
  - host: nimify.example.com
    http:
      paths:
      - path: /api/v1/simple
        pathType: Prefix
        backend:
          service:
            name: nimify-simple-service
            port:
              number: 80
      - path: /api/v2/robust
        pathType: Prefix
        backend:
          service:
            name: nimify-robust-service
            port:
              number: 80
      - path: /api/v3/optimized
        pathType: Prefix
        backend:
          service:
            name: nimify-optimized-service
            port:
              number: 80

---
# HorizontalPodAutoscaler for Optimized service
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: nimify-optimized-hpa
  namespace: nimify-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: nimify-optimized
  minReplicas: 4
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 25
        periodSeconds: 60

---
# PersistentVolumeClaims
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: nimify-production
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: nimify-production
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: fast-ssd

---
# NetworkPolicy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: nimify-network-policy
  namespace: nimify-production
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: nimify-production
    - namespaceSelector:
        matchLabels:
          name: nginx-ingress
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: nimify-production
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53